plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.jetbrains.intellij.platform' version '2.6.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions.jvmTarget = '17'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '17'
}

def myGroup = 'com.bytedance.tools'
def myVersion = '2.0.5'
def mySinceBuild = "232"
def myUntilBuild = "252.*"


boolean useSourceCode = false

repositories {
    intellijPlatform {
        defaultRepositories()
    }
    if (getProperties("customMarvenUrl") != null) {
        maven { url getProperties("customMarvenUrl") }
    }
}




intellijPlatform {
//    pluginVerification {
//        ides {
//            recommended()
//            select {
//                types = listOf(
//                        IntelliJPlatformType.AndroidStudio,
//                        IntelliJPlatformType.IntellijIdeaUltimate,
//                        IntelliJPlatformType.IntellijIdeaCommunity
//                )
//                channels = listOf(ProductRelease.Channel.RELEASE)
//                sinceBuild = mySinceBuild
//                untilBuild = myUntilBuild
//            }
//        }
//    }

    pluginConfiguration {
        name = "CodeLocator"
        group = myGroup
        ideaVersion {
            sinceBuild = mySinceBuild
            untilBuild = myUntilBuild
        }

        changeNotes = project.file("changeNotes.txt").text
    }


    publishing {
        token = System.getenv("JETBRAINS_PUBLISH_TOKEN")
//        channels = listOf("beta")

    }

    buildSearchableOptions.set(false)


}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "com.squareup.okhttp3:okhttp:3.8.1"
    implementation "javazoom:jlayer:1.0.1"
    if (useSourceCode) {
        implementation project(':CodeLocatorModel')
    } else {
        implementation "com.bytedance.tools.codelocator:codelocator-model:2.0.4"
    }
    implementation "io.reactivex.rxjava3:rxjava:3.1.4"
    implementation "com.google.zxing:core:3.5.0"
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    intellijPlatform {
        if (project.hasProperty("localIdeOverride")) {
            local(property("localIdeOverride").toString())
        } else {
//            androidStudio("2024.1.2.13")
//            androidStudio("2023.2.1.25")
            androidStudio("2025.1.1.14")
        }
        bundledPlugins(["org.jetbrains.kotlin", "org.jetbrains.android", "com.intellij.java"])
        pluginVerifier()
        zipSigner()
        instrumentationTools()
    }
}

boolean isFirst = true

boolean isWindows() {
    return System.getProperty("os.name").toLowerCase().indexOf("windows") != -1
}



gradle.taskGraph.beforeTask {
    if (isFirst && !isWindows()) {
        isFirst = false
        def tasks = gradle.taskGraph.allTasks
        def logFile = new File("src/main/java/com/bytedance/tools/codelocator/utils/Log.java")
        if ("runIde".equals(tasks.get(tasks.size() - 1).name)) {
            def commands = ["/bin/sh", "-c", "sed -i '' 's/DEBUG = false/DEBUG = true/g' " + logFile.getAbsolutePath()] as String[]
            def exec = Runtime.getRuntime().exec(commands)
            exec.waitFor()
        } else {
            def commands = ["/bin/sh", "-c", "sed -i '' 's/DEBUG = true/DEBUG = false/g' " + logFile.getAbsolutePath()] as String[]
            def exec = Runtime.getRuntime().exec(commands)
            exec.waitFor()
        }

        def netFile = new File("src/main/java/com/bytedance/tools/codelocator/utils/NetUtils.java")
        replaceUrl(netFile, "searchCodeUrl", "SEARCH_CODE_URL")
        replaceUrl(netFile, "feedbackUrl", "FEEDBACK_URL")
        replaceUrl(netFile, "docUrl", "DOC_URL")
        replaceUrl(netFile, "commonServerUrl", "SERVER_URL")
        replaceUrl(netFile, "fileServerUrl", "FILE_SERVER_URL")
    }

    if (it instanceof Zip && !it.toString().contains("CodeLocatorModel")) {
        it.duplicatesStrategy = DuplicatesStrategy.INCLUDE
        it.from({
            file("imgcopy.m")
        })
        it.from({
            file("AndroidModuleTemplate.zip")
        })
        it.from({
            file("JarModuleTemplate.zip")
        })
        it.from({
            file("src${File.separator}main${File.separator}resources${File.separator}META-INF${File.separator}version")
        })
        it.from({
            file("codelocatorhelper.apk")
        })
        it.from({
            file("restartAndroidStudio")
        })
    }
}

gradle.taskGraph.afterTask {
    if ("prepareSandbox".equals((it as Task).getName()) || "prepareIdeaSandbox".equals((it as Task).getName())) {
        copyFile(new File("imgcopy.m"), new File("build${File.separator}idea-sandbox${File.separator}plugins${File.separator}CodeLocatorPlugin${File.separator}imgcopy.m"))
        copyFile(new File("JarModuleTemplate.zip"), new File("build${File.separator}idea-sandbox${File.separator}plugins${File.separator}CodeLocatorPlugin${File.separator}JarModuleTemplate.zip"))
        copyFile(new File("AndroidModuleTemplate.zip"), new File("build${File.separator}idea-sandbox${File.separator}plugins${File.separator}CodeLocatorPlugin${File.separator}AndroidModuleTemplate.zip"))
        copyFile(new File("codelocatorhelper.apk"), new File("build${File.separator}idea-sandbox${File.separator}plugins${File.separator}CodeLocatorPlugin${File.separator}codelocatorhelper.apk"))
        copyFile(new File("restartAndroidStudio"), new File("build${File.separator}idea-sandbox${File.separator}plugins${File.separator}CodeLocatorPlugin${File.separator}restartAndroidStudio"))
    }
}

private void replaceUrl(File file, String property, String variable) {
    def searchUrl = getProperties(property)
    if (searchUrl != null && !searchUrl.isEmpty()) {
        try {
            BufferedReader br = new BufferedReader(new FileReader(file))
            StringBuilder sb = new StringBuilder((int) file.length())
            String line = null
            while ((line = br.readLine()) != null) {
                if (sb.length() > 0) {
                    sb.append("\n")
                }
                sb.append(line)
            }
            br.close()
            def indexOfVariable = sb.indexOf(variable)
            if (indexOfVariable < 0) {
                return
            }
            def indexOfStartSplit = sb.indexOf("\"", indexOfVariable + 1)
            if (indexOfStartSplit < 0) {
                return
            }
            def indexOfEndSplit = sb.indexOf("\"", indexOfStartSplit + 1)
            if (indexOfEndSplit < 0) {
                return
            }
            sb.replace(indexOfStartSplit + 1, indexOfEndSplit, searchUrl)
            BufferedWriter writer = new BufferedWriter(new FileWriter(file))
            writer.write(sb.toString())
            writer.flush()
            writer.close()
        } catch (Throwable t) {
            println("Throwable: " + t)
        }
    }
}

String getProperties(String key) {
    def properties = new Properties()
    if (!project.rootProject.file('local.properties').exists()) {
        return null
    }
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty(key)
}

static void copyFile(File sourceFile, File targetFile) {
    InputStream inputStream = null
    OutputStream outputStream = null
    try {
        inputStream = new FileInputStream(sourceFile)
        outputStream = new FileOutputStream(targetFile)
        byte[] buffer = new byte[8192]
        int len
        while ((len = inputStream.read(buffer)) > 0) {
            outputStream.write(buffer, 0, len)
        }
        inputStream.close()
        outputStream.close()
    } catch (Exception e) {
        System.out.println("Copy Error " + e)
    }
}